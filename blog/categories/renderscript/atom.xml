<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: renderscript | Paris Blog]]></title>
  <link href="http://pyeh.github.io/blog/categories/renderscript/atom.xml" rel="self"/>
  <link href="http://pyeh.github.io/"/>
  <updated>2014-10-22T18:29:53+08:00</updated>
  <id>http://pyeh.github.io/</id>
  <author>
    <name><![CDATA[Han-Chun Yeh (Paris)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android RenderScript Notes]]></title>
    <link href="http://pyeh.github.io/blog/2013/12/12/android-renderscript-notes/"/>
    <updated>2013-12-12T12:06:00+08:00</updated>
    <id>http://pyeh.github.io/blog/2013/12/12/android-renderscript-notes</id>
    <content type="html"><![CDATA[<p>This page has my notes from initial study for Android RenderScript.</p>

<p>RenderScript is Android 3D graphics rendering and intensive computation using heterogeneous computing.<br/>
1. Portability: A general purpose compute API across different system computing hardware<br/>
2. High Performance<br/>
3. Developer Friendly: A compute API similar to CUDA, OpenCL or GLSL, and a familiar language with C99</p>

<p>There are three major components in RenderScript<br/>
1. Offline compiler (llvm-rs-cc): Convert script files into portable bitcode and reflected Java layer<br/>
2. Online JIT compiler (libbcc): Translate portable bitcode to appropriate machine code (CPU/GPU/DSP/&hellip;)<br/>
3. Runtime library support (libRS): Manage scripts from Dalvik layer and also provide basic support libraries (math functions, etc.)<br/>
A good introduciton of <a href="https://events.linuxfoundation.org/slides/2011/lfcs/lfcs2011_llvm_liao.pdf">Android RenderScript on LLVM</a> is given by Shih-Wei Liao, and a good comparsion and analysis of different <a href="https://www.google.com.tw/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=6&amp;cad=rja&amp;ved=0CGEQFjAF&amp;url=http%3A%2F%2Fwww.kandroid.org%2Fboard%2Fdata%2Fboard%2Fconference%2Ffile_in_body%2F1%2F6renderscript_2013_10_24_%25EC%2588%2598%25EC%25A0%2595.pdf&amp;ei=ACapUtGyKoGFoQSFv4GgBQ&amp;usg=AFQjCNGj_OC0Yl6ssx7s1EDFii2WmfLyiw&amp;sig2=Ng96XAtyU2Zkc2o7EGbA8g">android programming model</a> is given by Kandroid S/W Fundamentals Study Group at 12th Kandroid Conference, 2013.</p>

<p>Clang is offline frontend compiler to create LLVM bitcode and reflected Java layer. The portable bitcode supplied as a resource within .apk container and is compiled before use one the device. Offline compiler, llvm-rs-cc, performs machine-independent optimizations on host before emitting portable bitcode so that the online JIT on android devices can be light-weight.</p>

<p>Online JIT compiler, libbcc, performs target-specific optimizations and code generation and links dynamically against vendor-specific runtime library funcitons (lib*.bc). An example: RenderScript&rsquo;s runtime (libclcore.bc) comes with vector operations. Xoom&rsquo;s libclcore will have different CPU/GPU support (VFP3-16) than Nexus S&rsquo;s (NEON).</p>
]]></content>
  </entry>
  
</feed>
