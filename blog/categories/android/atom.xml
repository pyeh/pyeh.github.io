<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | Paris Blog]]></title>
  <link href="http://pyeh.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://pyeh.github.io/"/>
  <updated>2014-12-29T00:34:10+08:00</updated>
  <id>http://pyeh.github.io/</id>
  <author>
    <name><![CDATA[Han-Chun Yeh (Paris)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android vibrator on MSM8909 platform]]></title>
    <link href="http://pyeh.github.io/blog/2014/12/22/android-vibrator-on-msm8909-platform/"/>
    <updated>2014-12-22T23:38:00+08:00</updated>
    <id>http://pyeh.github.io/blog/2014/12/22/android-vibrator-on-msm8909-platform</id>
    <content type="html"><![CDATA[<p>QPNP (Qualcomm Plug Plug N Play) vibrator is a peripheral on Qualcomm PMICs. The PMIC is connected to MSM8909 via SPMI bus.
Its driver uses the timed-output framework to interface with the userspace.</p>

<h3>1. MSM8909 Vibrator driver implementation and DTS file</h3>

<p>The vibrator is connected on the VIB_DRV_N line of the QPNP PMIC, and the PMIC vibrator driver can be used to program the voltage from 1.2 V to 3.1 V in 100 mV step through VIB_DRV_N pin.</p>

<h4>DTSI documentation</h4>

<p>``` c kernel/arch/arm/boot/dts/qcom/msm-pm8909.dtsi</p>

<pre><code>            pm8909_vib: qcom,vibrator@c000 {
                    compatible = "qcom,qpnp-vibrator";
                    reg = &lt;0xc000 0x100&gt;;
                    label = "vibrator";
                    status = "disabled";
            };
</code></pre>

<p>```</p>

<h4>Documentation/devicetree/bindings/platform/msm/qpnp-vibrator.txt</h4>

<h5>Required Properties:</h5>

<pre><code>- status: default status is set to "disabled.  Must be "okay"  
- compatible: must be "qcom,qpnp-vibrator"  
- label: name which describes the device  
- reg: address of device  
</code></pre>

<h5>Optional Properties:</h5>

<pre><code>- qcom,vib-timeout-ms: timeout of vibrator, in ms.  Default 15000 ms  
- qcom,vib-vtg-level-mV: voltage level, in mV.  Default 3100 mV  
</code></pre>

<h4>vibrator driver source</h4>

<p>QPNP vibrator operates in two modes &ndash; manual and PWM (Pulse Width Modulation). PWM is supported
through one of dtest lines connected to the vibrator. Manual mode is used on MSM8909 platform.</p>

<p>``` c qpnp_vibrator_prboe() under kernel/drivers/platform/msm/qpnp-vibrator.c
static int qpnp_vibrator_probe(struct spmi_device *spmi)
{</p>

<pre><code>    struct qpnp_vib *vib;
    struct resource *vib_resource;
    int rc;

    vib = devm_kzalloc(&amp;spmi-&gt;dev, sizeof(*vib), GFP_KERNEL);
    if (!vib)
            return -ENOMEM;

    vib-&gt;spmi = spmi;

    vib_resource = spmi_get_resource(spmi, 0, IORESOURCE_MEM, 0);
    if (!vib_resource) {
            dev_err(&amp;spmi-&gt;dev, "Unable to get vibrator base address\n");
            return -EINVAL;
    }
    vib-&gt;base = vib_resource-&gt;start;

    rc = qpnp_vib_parse_dt(vib);
    if (rc) {
            dev_err(&amp;spmi-&gt;dev, "DT parsing failed\n");
            return rc;
    }

    rc = qpnp_vibrator_config(vib);
    if (rc) {
            dev_err(&amp;spmi-&gt;dev, "vib config failed\n");
            return rc;
    }

    mutex_init(&amp;vib-&gt;lock);
    INIT_WORK(&amp;vib-&gt;work, qpnp_vib_update);

    hrtimer_init(&amp;vib-&gt;vib_timer, CLOCK_MONOTONIC, HRTIMER_MODE_REL);
    vib-&gt;vib_timer.function = qpnp_vib_timer_func;

    vib-&gt;timed_dev.name = "vibrator";
    vib-&gt;timed_dev.get_time = qpnp_vib_get_time;
    vib-&gt;timed_dev.enable = qpnp_vib_enable;

    dev_set_drvdata(&amp;spmi-&gt;dev, vib);

    rc = timed_output_dev_register(&amp;vib-&gt;timed_dev);
    if (rc &lt; 0)
            return rc;

    return rc;
</code></pre>

<p>}
```</p>

<h4>Uses timed output framework</h4>

<p>callback <em>.enable</em> and <em>.get_time</em> of <em>struct timed_output_dev</em> is hooked by <code>qpnp_vib_enable()</code> and <code>qpnp_vib_get_time()</code>.
``` c Implementation of qnp_vib_enable() and qpnp_vib_get_time()
static void qpnp_vib_enable(struct timed_output_dev *dev, int value)
{</p>

<pre><code>    struct qpnp_vib *vib = container_of(dev, struct qpnp_vib,
                                     timed_dev);

    mutex_lock(&amp;vib-&gt;lock);
    hrtimer_cancel(&amp;vib-&gt;vib_timer);

    if (value == 0)
            vib-&gt;state = 0;
    else {
            value = (value &gt; vib-&gt;timeout ?
                             vib-&gt;timeout : value);
            vib-&gt;state = 1;
            hrtimer_start(&amp;vib-&gt;vib_timer,
                          ktime_set(value / 1000, (value % 1000) * 1000000),
                          HRTIMER_MODE_REL);
    }
    mutex_unlock(&amp;vib-&gt;lock);
    schedule_work(&amp;vib-&gt;work);
</code></pre>

<p>}</p>

<p>static int qpnp_vib_get_time(struct timed_output_dev *dev)
{</p>

<pre><code>    struct qpnp_vib *vib = container_of(dev, struct qpnp_vib,
                                                     timed_dev);

    if (hrtimer_active(&amp;vib-&gt;vib_timer)) {
            ktime_t r = hrtimer_get_remaining(&amp;vib-&gt;vib_timer);
            return (int)ktime_to_us(r);
    } else
            return 0;
</code></pre>

<p>}
```</p>

<h4>wq is scheduled to execute work of qpnp_vib_update() and turns off vibrator via qpnp_vibrator_suspend() at suspend callback.</h4>

<p>Inside <code>qpnp_vib_update()</code> and <code>qpnp_vibrator_suspend()</code>, they both call <code>qpnp_vib_set()</code> to turn on/off vibrator.
``` c Implementation of qpnp_vib_set() to control vibrator via PWM or Manual Mode
static int qpnp_vib_set(struct qpnp_vib *vib, int on)
{</p>

<pre><code>    int rc;
    u8 val;

    if (on) {
            if (vib-&gt;mode != QPNP_VIB_MANUAL)
                    pwm_enable(vib-&gt;pwm_info.pwm_dev);
            else {
                    val = vib-&gt;reg_en_ctl;
                    val |= QPNP_VIB_EN;
                    rc = qpnp_vib_write_u8(vib, &amp;val,
                                    QPNP_VIB_EN_CTL(vib-&gt;base));
                    if (rc &lt; 0)
                            return rc;
                    vib-&gt;reg_en_ctl = val;
            }
    } else {
            if (vib-&gt;mode != QPNP_VIB_MANUAL)
                    pwm_disable(vib-&gt;pwm_info.pwm_dev);
            else {
                    val = vib-&gt;reg_en_ctl;
                    val &amp;= ~QPNP_VIB_EN;
                    rc = qpnp_vib_write_u8(vib, &amp;val,
                                    QPNP_VIB_EN_CTL(vib-&gt;base));
                    if (rc &lt; 0)
                            return rc;
                    vib-&gt;reg_en_ctl = val;
            }
    }

    return 0;
</code></pre>

<p>}
```</p>

<h3>2. Timed output class driver</h3>

<p>Timed output is a class drvier to allow changing a state and restore is automatically after a specfied timeout.
This exposes a user space interface under <em>/sys/class/timed_output/vibrator/enable</em> used by vibrator code.
``` c kernel/drivers/staging/android/timed_output.c
static ssize_t enable_show(struct device <em>dev, struct device_attribute </em>attr,</p>

<pre><code>            char *buf)
</code></pre>

<p>{</p>

<pre><code>    struct timed_output_dev *tdev = dev_get_drvdata(dev);
    int remaining = tdev-&gt;get_time(tdev);

    return sprintf(buf, "%d\n", remaining);
</code></pre>

<p>}</p>

<p>static ssize_t enable_store(</p>

<pre><code>            struct device *dev, struct device_attribute *attr,
            const char *buf, size_t size)
</code></pre>

<p>{</p>

<pre><code>    struct timed_output_dev *tdev = dev_get_drvdata(dev);
    int value;

    if (sscanf(buf, "%d", &amp;value) != 1)
            return -EINVAL;

    tdev-&gt;enable(tdev, value);

    return size;
</code></pre>

<p>}
int timed_output_dev_register(struct timed_output_dev *tdev)
{</p>

<pre><code>    int ret;

    if (!tdev || !tdev-&gt;name || !tdev-&gt;enable || !tdev-&gt;get_time)
            return -EINVAL;

    ret = create_timed_output_class();
    if (ret &lt; 0)
            return ret;

    tdev-&gt;index = atomic_inc_return(&amp;device_count);
    tdev-&gt;dev = device_create(timed_output_class, NULL,
            MKDEV(0, tdev-&gt;index), NULL, tdev-&gt;name);
    if (IS_ERR(tdev-&gt;dev))
            return PTR_ERR(tdev-&gt;dev);

    ret = device_create_file(tdev-&gt;dev, &amp;dev_attr_enable);
    if (ret &lt; 0)
            goto err_create_file;

    dev_set_drvdata(tdev-&gt;dev, tdev);
    tdev-&gt;state = 0;
    return 0;
</code></pre>

<p>err_create_file:</p>

<pre><code>    device_destroy(timed_output_class, MKDEV(0, tdev-&gt;index));
    pr_err("failed to register driver %s\n",
                    tdev-&gt;name);

    return ret;
</code></pre>

<p>}
EXPORT_SYMBOL_GPL(timed_output_dev_register);
```</p>

<h3>3. Android vibrator HAL</h3>

<p>Its interface to linux device drivers call with the specified timeout in millisecond via <code>vibrator_on()</code>.</p>

<p>``` c hardware/libhardware_legacy/vibrator/vibrator.c</p>

<h1>define THE_DEVICE &ldquo;/sys/class/timed_output/vibrator/enable&rdquo;</h1>

<p>static int sendit(int timeout_ms)
{</p>

<pre><code>int nwr, ret, fd;
char value[20];
</code></pre>

<h1>ifdef QEMU_HARDWARE</h1>

<pre><code>if (qemu_check()) {
    return qemu_control_command( "vibrator:%d", timeout_ms );
}
</code></pre>

<h1>endif</h1>

<pre><code>fd = open(THE_DEVICE, O_RDWR);
if(fd &lt; 0)
    return errno;

nwr = sprintf(value, "%d\n", timeout_ms);
ret = write(fd, value, nwr);

close(fd);

return (ret == nwr) ? 0 : -1;
</code></pre>

<p>}</p>

<p>int vibrator_on(int timeout_ms)
{</p>

<pre><code>/* constant on, up to maximum allowed time */
return sendit(timeout_ms);
</code></pre>

<p>}</p>

<p>int vibrator_off()
{</p>

<pre><code>return sendit(0);
</code></pre>

<p>}
```</p>

<h3>4. Native layer through JNI between HAL and vibrator service</h3>

<p>Controls of vibrator service reaches via <code>vibratorOn()</code>, <code>vibratorOff()</code>, and <code>vibratorExists()</code>.</p>

<p>``` c frameworks//base/services/core/jni/com_android_server_VibratorService.cpp
static void vibratorOn(JNIEnv *env, jobject clazz, jlong timeout_ms)
{</p>

<pre><code>// ALOGI("vibratorOn\n");
vibrator_on(timeout_ms);
</code></pre>

<p>}</p>

<p>static void vibratorOff(JNIEnv *env, jobject clazz)
{</p>

<pre><code>// ALOGI("vibratorOff\n");
vibrator_off();
</code></pre>

<p>}</p>

<p>static JNINativeMethod method_table[] = {</p>

<pre><code>{ "vibratorExists", "()Z", (void*)vibratorExists },
{ "vibratorOn", "(J)V", (void*)vibratorOn },
{ "vibratorOff", "()V", (void*)vibratorOff }
</code></pre>

<p>};</p>

<p>int register_android_server_VibratorService(JNIEnv *env)
{</p>

<pre><code>return jniRegisterNativeMethods(env, "com/android/server/VibratorService",
        method_table, NELEM(method_table));
</code></pre>

<p>}
```</p>

<h3>5. Java Vibrator Service</h3>

<p>In application layer before controling vibrator, applications have to get the access to the vibrator service.
The control goes into the vibrator service (<em>Framework Layer</em>) thru binder inteface.
For example, App. creates Vibrator object and start the vibration via <code>startVibrationLocked(vib)</code>.</p>

<p>Inside <code>startVibrationLocked()</code>:</p>

<p>If mTimeout != 0, then call the JNI function <code>vibratorOn()</code>.
else, call the code, which handle the rhythmic vibration pattern, which intern call the <code>vibratorOn()</code> through <code>VibrateThread()</code>.</p>

<p>``` java frameworks/base/services/core/java/com/android/server/VibratorService.java</p>

<pre><code>// Lock held on mVibrations
private void startVibrationLocked(final Vibration vib) {
    try {
        if (mLowPowerMode
                &amp;&amp; vib.mUsageHint != AudioAttributes.USAGE_NOTIFICATION_RINGTONE) {
            return;
        }

        int mode = mAppOpsService.checkAudioOperation(AppOpsManager.OP_VIBRATE,
                vib.mUsageHint, vib.mUid, vib.mOpPkg);
        if (mode == AppOpsManager.MODE_ALLOWED) {
            mode = mAppOpsService.startOperation(AppOpsManager.getToken(mAppOpsService),
                AppOpsManager.OP_VIBRATE, vib.mUid, vib.mOpPkg);
        }
        if (mode != AppOpsManager.MODE_ALLOWED) {
            if (mode == AppOpsManager.MODE_ERRORED) {
                Slog.w(TAG, "Would be an error: vibrate from uid " + vib.mUid);
            }
            mH.post(mVibrationRunnable);
            return;
        }
    } catch (RemoteException e) {
    }
    if (vib.mTimeout != 0) {
        doVibratorOn(vib.mTimeout, vib.mUid, vib.mUsageHint);
        mH.postDelayed(mVibrationRunnable, vib.mTimeout);
    } else {
        // mThread better be null here. doCancelVibrate should always be
        // called before startNextVibrationLocked or startVibrationLocked.
        mThread = new VibrateThread(vib);
        mThread.start();
    }
}

private void doVibratorOn(long millis, int uid, int usageHint) {
    synchronized (mInputDeviceVibrators) {
        if (DEBUG) {
            Slog.d(TAG, "Turning vibrator on for " + millis + " ms.");
        }
        try {
            mBatteryStatsService.noteVibratorOn(uid, millis);
            mCurVibUid = uid;
        } catch (RemoteException e) {
        }
        final int vibratorCount = mInputDeviceVibrators.size();
        if (vibratorCount != 0) {
            final AudioAttributes attributes = new AudioAttributes.Builder().setUsage(usageHint)
                    .build();
            for (int i = 0; i &lt; vibratorCount; i++) {
                mInputDeviceVibrators.get(i).vibrate(millis, attributes);
            }
        } else {
            vibratorOn(millis);
        }
    }
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android RenderScript Notes]]></title>
    <link href="http://pyeh.github.io/blog/2013/12/12/android-renderscript-notes/"/>
    <updated>2013-12-12T12:06:00+08:00</updated>
    <id>http://pyeh.github.io/blog/2013/12/12/android-renderscript-notes</id>
    <content type="html"><![CDATA[<p>This page has my notes from initial study for Android RenderScript.</p>

<p>RenderScript is Android 3D graphics rendering and intensive computation using heterogeneous computing.<br/>
1. Portability: A general purpose compute API across different system computing hardware<br/>
2. High Performance<br/>
3. Developer Friendly: A compute API similar to CUDA, OpenCL or GLSL, and a familiar language with C99</p>

<p>There are three major components in RenderScript<br/>
1. Offline compiler (llvm-rs-cc): Convert script files into portable bitcode and reflected Java layer<br/>
2. Online JIT compiler (libbcc): Translate portable bitcode to appropriate machine code (CPU/GPU/DSP/&hellip;)<br/>
3. Runtime library support (libRS): Manage scripts from Dalvik layer and also provide basic support libraries (math functions, etc.)<br/>
A good introduciton of <a href="https://events.linuxfoundation.org/slides/2011/lfcs/lfcs2011_llvm_liao.pdf">Android RenderScript on LLVM</a> is given by Shih-Wei Liao, and a good comparsion and analysis of different <a href="https://www.google.com.tw/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=6&amp;cad=rja&amp;ved=0CGEQFjAF&amp;url=http%3A%2F%2Fwww.kandroid.org%2Fboard%2Fdata%2Fboard%2Fconference%2Ffile_in_body%2F1%2F6renderscript_2013_10_24_%25EC%2588%2598%25EC%25A0%2595.pdf&amp;ei=ACapUtGyKoGFoQSFv4GgBQ&amp;usg=AFQjCNGj_OC0Yl6ssx7s1EDFii2WmfLyiw&amp;sig2=Ng96XAtyU2Zkc2o7EGbA8g">android programming model</a> is given by Kandroid S/W Fundamentals Study Group at 12th Kandroid Conference, 2013.</p>

<p>Clang is offline frontend compiler to create LLVM bitcode and reflected Java layer. The portable bitcode supplied as a resource within .apk container and is compiled before use one the device. Offline compiler, llvm-rs-cc, performs machine-independent optimizations on host before emitting portable bitcode so that the online JIT on android devices can be light-weight.</p>

<p>Online JIT compiler, libbcc, performs target-specific optimizations and code generation and links dynamically against vendor-specific runtime library funcitons (lib*.bc). An example: RenderScript&rsquo;s runtime (libclcore.bc) comes with vector operations. Xoom&rsquo;s libclcore will have different CPU/GPU support (VFP3-16) than Nexus S&rsquo;s (NEON).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intel_mid: Android power management flow for suspend/resume using S0i3 implementation]]></title>
    <link href="http://pyeh.github.io/blog/2013/12/04/intel-mid-android-power-management-flow-for-suspend-slash-resume-using-s0i3-implementation/"/>
    <updated>2013-12-04T11:19:00+08:00</updated>
    <id>http://pyeh.github.io/blog/2013/12/04/intel-mid-android-power-management-flow-for-suspend-slash-resume-using-s0i3-implementation</id>
    <content type="html"><![CDATA[<p>The main PMU driver (arch/x86/platform/intel-mid/intel_soc_pmu.c) hooks to support Linux PM suspend/resume flows as follows.<br/>
The S0ix states are low-power active idle states that platform can be transitioned into.
&ndash; Register PMU driver as PCI device<br/>
The PMU driver registers mid_suspend_ops via suspend_set_ops().
```c mid_pci_register_init
/<em>*
 * mid_pci_register_init &ndash; register the PMU driver as PCI device
 </em>/
static struct pci_driver driver = {</p>

<pre><code>    .name = PMU_DRV_NAME,
    .id_table = mid_pm_ids,
    .probe = mid_pmu_probe,
    .remove = mid_pmu_remove,
    .shutdown = mid_pmu_shutdown
</code></pre>

<p>};</p>

<p>static int __init mid_pci_register_init(void)
{</p>

<pre><code>    int ret;

    mid_pmu_cxt = kzalloc(sizeof(struct mid_pmu_dev), GFP_KERNEL);

    if (mid_pmu_cxt == NULL)
            return -ENOMEM;

    mid_pmu_cxt-&gt;s3_restrict_qos =
            kzalloc(sizeof(struct pm_qos_request), GFP_KERNEL);
    if (mid_pmu_cxt-&gt;s3_restrict_qos) {
            pm_qos_add_request(mid_pmu_cxt-&gt;s3_restrict_qos,
                     PM_QOS_CPU_DMA_LATENCY, PM_QOS_DEFAULT_VALUE);
    } else {
            return -ENOMEM;
    }

    init_nc_device_states();

    mid_pmu_cxt-&gt;nc_restrict_qos =
            kzalloc(sizeof(struct pm_qos_request), GFP_KERNEL);
    if (mid_pmu_cxt-&gt;nc_restrict_qos == NULL)
            return -ENOMEM;

    /* initialize the semaphores */
    sema_init(&amp;mid_pmu_cxt-&gt;scu_ready_sem, 1);

    /* registering PCI device */
    ret = pci_register_driver(&amp;driver);
    suspend_set_ops(&amp;mid_suspend_ops);

    return ret;
</code></pre>

<p>}
<code>
- mid_suspend_enter() performs the required S3 state over standby_enter()  
check_nc_sc_status() hooked by mrfld_nc_sc_status_check (defind at arch/x86/platform/intel-mid/intel_soc_mrfld.c) is to check north complex (NC) and soutch complex (SC) device status. Return true if all NC and SC devices are in D0i3.
</code> c mid_suspend_enter()
static const struct platform_suspend_ops mid_suspend_ops = {</p>

<pre><code>    .begin = mid_suspend_begin,
    .valid = mid_suspend_valid,
    .prepare = mid_suspend_prepare,
    .prepare_late = mid_suspend_prepare_late,
    .enter = mid_suspend_enter,
    .end = mid_suspend_end,
</code></pre>

<p>};</p>

<p>static int mid_suspend_enter(suspend_state_t state)                                                                               <br/>
{</p>

<pre><code>    int ret;

    if (state != PM_SUSPEND_MEM)
            return -EINVAL;

    /* one last check before entering standby */
    if (pmu_ops-&gt;check_nc_sc_status) {
            if (!(pmu_ops-&gt;check_nc_sc_status())) {
                    trace_printk("Device d0ix status check failed! Aborting Standby entry!\n");
                    WARN_ON(1);
            }
    }

    trace_printk("s3_entry\n");
    ret = standby_enter();
    trace_printk("s3_exit %d\n", ret);
    if (ret != 0)
            dev_dbg(&amp;mid_pmu_cxt-&gt;pmu_dev-&gt;dev,
                            "Failed to enter S3 status: %d\n", ret);

    return ret;
</code></pre>

<p>}</p>

<p>```</p>

<ul>
<li>standby_enter() performs requried S3 state

<ul>
<li>mid_state_to_sys_state() maps power states to driver&rsquo;s internal indexes.</li>
<li>mid_s01x_enter() performs required S3 state</li>
<li>__mwait(mid_pmu_cxt->s3_hint, 1) is issued with a hint to enter S0i3(S3 emulation using S0i3, as I observed that MRFLD_S3_HINT with 0x64 is same as MID_S0I3_STATE with 0x64). When both core issue an mwait C7, it is a hint provided by the idle driver to enter an S0ix state.</li>
<li><p>This triggers S0i3 entry, but the decision and policy is selected by SCU FW.
``` c standby_enter()
static int standby_enter(void)
{
  u32 temp = 0;
  int s3_state = mid_state_to_sys_state(MID_S3_STATE);</p>

<p>  if (mid_s0ix_enter(MID_S3_STATE) != MID_S3_STATE) {
          pmu_set_s0ix_complete();
          return -EINVAL;
  }</p>

<p>  /<em> time stamp for end of s3 entry </em>/
  time_stamp_for_sleep_state_latency(s3_state, false, true);</p>

<p>  <strong>monitor((void *) &amp;temp, 0, 0);
  smp_mb();
  </strong>mwait(mid_pmu_cxt->s3_hint, 1);</p>

<p>  /<em> time stamp for start of s3 exit </em>/
  time_stamp_for_sleep_state_latency(s3_state, true, false);</p>

<p>  pmu_set_s0ix_complete();</p>

<p>  /<em>set wkc to appropriate value suitable for s0ix</em>/
  writel(mid_pmu_cxt->ss_config->wake_state.wake_enable[0],
                 &amp;mid_pmu_cxt->pmu_reg->pm_wkc[0]);
  writel(mid_pmu_cxt->ss_config->wake_state.wake_enable[1],
                 &amp;mid_pmu_cxt->pmu_reg->pm_wkc[1]);</p>

<p>  mid_pmu_cxt->camera_off = 0;
  mid_pmu_cxt->display_off = 0;</p>

<p>  if (platform_is(INTEL_ATOM_MRFLD))
          up(&amp;mid_pmu_cxt->scu_ready_sem);</p>

<p>  return 0;
}
```</p></li>
</ul>
</li>
<li>mid_s01x_enter()

<ul>
<li>pmu_prepare_wake() will mask wakeup from AONT timers for s3. If s3 is aborted for any reason, we don&rsquo;t want to leave AONT timers masked until next suspend, otherwise if next to happen is s0ix, no timer could wakeup SoC from s0ix and we might miss to kick the kernel watchdog.</li>
<li><p>enter() hooked by mrfld_pmu_enter (defined at arch/x86/platform/intel-mid/intel_soc_mrfld.c). Compared to Medfield and Covertail platform, PM_CMD is not required to send to SCU.
``` c mid_s01x_enter()
int mid_s0ix_enter(int s0ix_state)
{
  int ret = 0;</p>

<p>  if (unlikely(!pmu_ops || !pmu_ops->enter))
          goto ret;</p>

<p>  /* check if we can acquire scu_ready_sem</p>

<ul>
<li> if we are not able to then do a c6 */
if (down_trylock(&amp;mid_pmu_cxt->scu_ready_sem))
      goto ret;</li>
</ul>


<p>  /<em> If PMU is busy, we&rsquo;ll retry on next C6 </em>/
  if (unlikely(_pmu_read_status(PMU_BUSY_STATUS))) {
          up(&amp;mid_pmu_cxt->scu_ready_sem);
          pr_debug(&ldquo;mid_pmu_cxt->scu_read_sem is up\n&rdquo;);
          goto ret;
  }</p>

<p>  pmu_prepare_wake(s0ix_state);</p>

<p>  /<em> no need to proceed if schedule pending </em>/
  if (unlikely(need_resched())) {
          pmu_stat_clear();
          up(&amp;mid_pmu_cxt->scu_ready_sem);
          goto ret;
  }</p>

<p>  /<em> entry function for pmu driver ops </em>/
  if (pmu_ops->enter(s0ix_state))
          ret = s0ix_state;</p></li>
</ul>
</li>
</ul>


<p>ret:</p>

<pre><code>    return ret;
</code></pre>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intel_mid: Introduction of android watchdogs and kernel watchdogs]]></title>
    <link href="http://pyeh.github.io/blog/2013/12/02/intel-mid-introduction-of-android-watchdog-and-kernel-watchdog/"/>
    <updated>2013-12-02T17:29:00+08:00</updated>
    <id>http://pyeh.github.io/blog/2013/12/02/intel-mid-introduction-of-android-watchdog-and-kernel-watchdog</id>
    <content type="html"><![CDATA[<p>Watchdogs monitor software and hardware device and prevent whole system from hanging. After looking into android BSP running on intel mid, merrifield, platform, I will try to classfiy watchdog into the following types. The first two belong to native Android supporting, and the last three are specified to intel-mid platform.</p>

<h2>1. Android framework&rsquo;s Java* watchdog</h2>

<p>Deal with cases when any of the following locks is held for more than a minute or when ServerThread is busy.</p>

<p>&mdash; ThermalManagerService<br/>
&mdash; PowerManagerService<br/>
&mdash; WindowMangerService<br/>
&mdash; MountService<br/>
&mdash; NetworkManagementService<br/>
&mdash; ActivityMangerService</p>

<p>If one of above services hangs for one minute, the java watchdog kills it and results in restarting android&rsquo;s framework by killing the SystemServer.</p>

<h2>2. Device-critical services</h2>

<p>Critical services are declared as &ldquo;critical&rdquo; in the corresponding rc files (eg, ueventd, servicemanager). If critical services exist or crash more than four times in four minutes, the device will reboot into recovery mode. This feature is handled by the init process.</p>

<h2>3. Kernel watchdog leads to COLD_RESET</h2>

<p>The kernel watchdog prvents the operating system from hanging. The System Control Unit (SCU firmware) resets the platform when the kernel cannot schedule the watchdog daemon (/usr/bin/ia_watchdogd).</p>

<p>The driver located at /drivers/watchdog/intel_scu_watchdog_evo.c provides a /dev/watchdog device to access the kernel watchdog and ioctls to configure the timer. Since the SCU provides the functionality, all access to watchdog features are routed to the SCU via an IPC (see more PIC regitrations at arch/x86/platform/intel-mid/intel_mid_scu.c)</p>

<ul>
<li>Init code installs the driver
``` c watchdog_rpmsg_init()
static struct rpmsg_driver watchdog_rpmsg = {
      .drv.name       = KBUILD_MODNAME,
      .drv.owner      = THIS_MODULE,
      .id_table       = watchdog_rpmsg_id_table,
      .probe          = watchdog_rpmsg_probe,
      .callback       = watchdog_rpmsg_cb,
      .remove         = watchdog_rpmsg_remove,
};</li>
</ul>


<p>static int __init watchdog_rpmsg_init(void)
{</p>

<pre><code>    if (intel_mid_identify_cpu() == INTEL_MID_CPU_CHIP_TANGIER)
            return register_rpmsg_driver(&amp;watchdog_rpmsg);
    else {                                                                                                                      
            pr_err("%s: watchdog driver: bad platform\n", __func__);
            return -ENODEV;
    }
</code></pre>

<p>}</p>

<h1>ifdef MODULE</h1>

<p>module_init(watchdog_rpmsg_init);</p>

<h1>else</h1>

<p>rootfs_initcall(watchdog_rpmsg_init);</p>

<h1>endif</h1>

<p>```</p>

<ul>
<li><p>create the /dev/watchdog only if the disabled_kernel_watchdog module parameter is not set. It gets the timer&rsquo;s configuration, registers reboot notifier, registers dump handler to irq#15, and adds sysfs/debugfs entries.
``` c watchdog_rpmsg_probe()&ndash;>intel_scu_watchdog_init()
/<em> Init code </em>/
static int intel_scu_watchdog_init(void)
{
      int ret = 0;</p>

<pre><code>  watchdog_device.normal_wd_action   = SCU_COLD_RESET_ON_TIMEOUT;
  watchdog_device.reboot_wd_action   = SCU_COLD_RESET_ON_TIMEOUT;
  watchdog_device.shutdown_wd_action = SCU_COLD_OFF_ON_TIMEOUT;
</code></pre></li>
</ul>


<h1>ifdef CONFIG_DEBUG_FS</h1>

<pre><code>    watchdog_device.panic_reboot_notifier = false;
</code></pre>

<h1>endif /<em> CONFIG_DEBUG_FS </em>/</h1>

<pre><code>    /* Initially, we are not in shutdown mode */
    watchdog_device.shutdown_flag = false;

    /* Check timeouts boot parameter */
    if (check_timeouts(pre_timeout, timeout)) {
            pr_err("%s: Invalid timeouts\n", __func__);
            return -EINVAL;
    }

    /* Reboot notifier */
    watchdog_device.reboot_notifier.notifier_call = reboot_notifier;
    watchdog_device.reboot_notifier.priority = 1;
    ret = register_reboot_notifier(&amp;watchdog_device.reboot_notifier);
    if (ret) {
            pr_crit("cannot register reboot notifier %d\n", ret);
            goto error_stop_timer;
    }

    /* Do not publish the watchdog device when disable (TO BE REMOVED) */
    if (!disable_kernel_watchdog) {
            watchdog_device.miscdev.minor = WATCHDOG_MINOR;
            watchdog_device.miscdev.name = "watchdog";
            watchdog_device.miscdev.fops = &amp;intel_scu_fops;

            ret = misc_register(&amp;watchdog_device.miscdev);
            watchdog_device.miscdev.fops = &amp;intel_scu_fops;

            ret = misc_register(&amp;watchdog_device.miscdev);
            if (ret) {
                    pr_crit("Cannot register miscdev %d err =%d\n",
                            WATCHDOG_MINOR, ret);
                    goto error_reboot_notifier;
            }
    }

    /* MSI #15 handler to dump registers */
    handle_mrfl_dev_ioapic(EXT_TIMER0_MSI);
    ret = request_irq((unsigned int)EXT_TIMER0_MSI,
            watchdog_warning_interrupt,
            IRQF_SHARED|IRQF_NO_SUSPEND, "watchdog",
            &amp;watchdog_device);
    if (ret) {
            pr_err("error requesting warning irq %d\n",
                   EXT_TIMER0_MSI);
            pr_err("error value returned is %d\n", ret);
            goto error_misc_register;
    }
</code></pre>

<h1>ifdef CONFIG_INTEL_SCU_SOFT_LOCKUP</h1>

<pre><code>    init_timer(&amp;softlock_timer);
</code></pre>

<h1>endif</h1>

<pre><code>    if (disable_kernel_watchdog) {
            pr_err("%s: Disable kernel watchdog\n", __func__);

            /* Make sure timer is stopped */
            ret = watchdog_stop();
            if (ret != 0)
                    pr_debug("cant disable timer\n");
    }
</code></pre>

<h1>ifdef CONFIG_DEBUG_FS</h1>

<pre><code>    ret = create_debugfs_entries();  
    if (ret) {
            pr_err("%s: Error creating debugfs entries\n", __func__);
            goto error_debugfs_entry;
    }
</code></pre>

<h1>endif</h1>

<pre><code>    watchdog_device.started = false;

    ret = create_watchdog_sysfs_files();
    if (ret) {
            pr_err("%s: Error creating debugfs entries\n", __func__);
            goto error_sysfs_entry;
    }

    return ret;
</code></pre>

<p>error_sysfs_entry:</p>

<pre><code>    /* Nothing special to do */
</code></pre>

<h1>ifdef CONFIG_DEBUG_FS</h1>

<p>error_debugfs_entry:</p>

<pre><code>    /* Remove entries done by create function */
</code></pre>

<h1>endif</h1>

<p>error_misc_register:</p>

<pre><code>    misc_deregister(&amp;watchdog_device.miscdev);
</code></pre>

<p>error_reboot_notifier:</p>

<pre><code>    unregister_reboot_notifier(&amp;watchdog_device.reboot_notifier);
</code></pre>

<p>error_stop_timer:</p>

<pre><code>    watchdog_stop();

    return ret;
</code></pre>

<p>}
```</p>

<ul>
<li><p>interrupt handler related to pre-timeout dumps kernel backtraces.
``` c watchdog_warning_interrupt
/<em> warning interrupt handler </em>/
static irqreturn_t watchdog_warning_interrupt(int irq, void *dev_id)
{
      pr_warn(&ldquo;[SHTDWN] %s, WATCHDOG TIMEOUT!\n&rdquo;, <strong>func</strong>);</p>

<pre><code>  /* Let's reset the platform after dumping some data */ 
  trigger_all_cpu_backtrace(); 
  panic("Kernel Watchdog"); 

  /* This code should not be reached */ 
  return IRQ_HANDLED; 
</code></pre>

<p>}</p></li>
</ul>


<p>```</p>

<ul>
<li><p>When power transisition happens, reboot_notifier is called for re-configuring watchdog timeouts and its default behavior.
COLD_RESET is set to reboot, and COLD_OFF is set to poewr halt and off. In case of a stucking rebooting or shutdown procedure, the platform will still could execute reset or power-off seperately.
``` c reboot_notifier
/<em> Reboot notifier </em>/
static int reboot_notifier(struct notifier_block <em>this,
                         unsigned long code,
                         void </em>another_unused)
{
      int ret;</p>

<pre><code>  if (code == SYS_RESTART || code == SYS_HALT || code == SYS_POWER_OFF) {
          pr_warn("Reboot notifier\n");

          if (watchdog_set_appropriate_timeouts())
                  pr_crit("reboot notifier cant set time\n");

          switch (code) {
          case SYS_RESTART:
                  ret = watchdog_set_reset_type(
                          watchdog_device.reboot_wd_action);
                  break;

          case SYS_HALT:
          case SYS_POWER_OFF:
                  ret = watchdog_set_reset_type(
                          watchdog_device.shutdown_wd_action);
                  break;
          }
          if (ret)
                  pr_err("%s: could not set reset type\n", __func__);
</code></pre></li>
</ul>


<h1>ifdef CONFIG_DEBUG_FS</h1>

<pre><code>            /* debugfs entry to generate a BUG during
            any shutdown/reboot call */
            if (watchdog_device.panic_reboot_notifier)
                    BUG();
</code></pre>

<h1>endif</h1>

<pre><code>            /* Don't do instant reset on close */
            reset_on_release = false;

            /* Kick once again */
            if (disable_kernel_watchdog == false) {
                    ret = watchdog_keepalive();
                    if (ret)
                            pr_warn("%s: no keep alive\n", __func__);

                    /* Don't allow any more keep-alives */
                    watchdog_device.shutdown_flag = true;
            }
    }
    return NOTIFY_DONE;
</code></pre>

<p>}
```</p>

<h2>4. Userspace watchdog daemon</h2>

<p>Source codes are located at /hardware/ia_watchdog/watchdog_daemon folder) and target location is /usr/bin/ia_watchdogd. This daemon is declared as one-shot service in the rc file (init.watchdog.rc) and perform the following steps:</p>

<p>&mdash; open the watchdog device /dev/watchdog.<br/>
&mdash; configure the pre_timeout with 75 seconds and timeout with 90 seconds.<br/>
&mdash; Loop forever. In the loop, kick the watchdog device (by writing to &lsquo;R&rsquo; to /dev/watchdog) every 60 seconds.</p>

<h2>5. SCU watchdog leads to PLATFORM_RESET(deep reset)</h2>

<p>This prevents the platform stucking on SCU by issuing a PLATFORM_RESET because the interface between the SCU and PMIC is broken.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[intel_mid: Overview of Simple Platform Interface]]></title>
    <link href="http://pyeh.github.io/blog/2013/11/27/intel-mid-overview-of-simple-platform-interface/"/>
    <updated>2013-11-27T15:40:00+08:00</updated>
    <id>http://pyeh.github.io/blog/2013/11/27/intel-mid-overview-of-simple-platform-interface</id>
    <content type="html"><![CDATA[<p>Start to develop android kernel under X86 MID platform, merrifield.
I am a newbie for porting kernel to Atom-based platform but am familiar with linux kernel and device drivers.
Noticed that Intel Android BSP introudes Simple Firmware Interface (SFI) a method for platform firmware to export
static tables (I2C, SPI, GPIO) to the operation system.</p>

<p>Intel&rsquo;s newer Atom processors support SFI since &ldquo;Moorestown&rdquo; SoC and SFI implementation was merged into upstream kernel 2.6.32(<a href="http://lwn.net/Articles/340476">http://lwn.net/Articles/340476</a>)</p>

<p>Actually, below link descrbies the SFI and explains how does SFI related to ACPI and UEFI.
<a href="https://simplefirmware.org/faq">https://simplefirmware.org/faq</a></p>

<p>Besides, below patch sets are to refactor existing code and implement a flexible way to support multiple boards and devices.
<a href="https://lkml.org/lkml/2013/10/10/81">https://lkml.org/lkml/2013/10/10/81</a></p>

<p>/arch/x86/platform/intel-mid/intel_mid_sfi.c is SFI parsing implementation, and let me understand how get_gpio_by_name() works.</p>
]]></content>
  </entry>
  
</feed>
